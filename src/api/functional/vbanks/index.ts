/**
 * @packageDocumentation
 * @module api.functional.vbanks
 */
//================================================================
import { AesPkcs5 } from "./../../__internal/AesPkcs5";
import { Fetcher } from "./../../__internal/Fetcher";
import { Primitive } from "./../../Primitive";
import type { IConnection } from "./../../IConnection";

import type { IIamportVBankPayment } from "./../../structures/IIamportVBankPayment";
import type { IIamportResponse } from "./../../structures/IIamportResponse";


/**
 * 가상 계좌 발급하기.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 가상 계좌 입력 정보
 * @returns 가상 계좌 결제 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportVbanksController.store()
 * @path POST /vbanks
 */
export function store
    (
        connection: IConnection,
        input: Primitive<store.Input>
    ): Promise<store.Output>
{
    return Fetcher.fetch
    (
        connection,
        store.CONFIG,
        store.METHOD,
        store.path(),
        input
    );
}
export namespace store
{
    export type Input = Primitive<IIamportVBankPayment.IStore>;
    export type Output = Primitive<IIamportResponse<IIamportVBankPayment>>;


    export const METHOD = "POST";
    export const PATH = "/vbanks";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(): string
    {
        return `/vbanks`;
    }
}

/**
 * 가상 계좌 편집하기.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 가상 계좌 편집 입력 정보
 * @returns 편집된 가상 계좌 결제 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportVbanksController.update()
 * @path PUT /vbanks
 */
export function update
    (
        connection: IConnection,
        input: Primitive<update.Input>
    ): Promise<update.Output>
{
    return Fetcher.fetch
    (
        connection,
        update.CONFIG,
        update.METHOD,
        update.path(),
        input
    );
}
export namespace update
{
    export type Input = Primitive<IIamportVBankPayment.IUpdate>;
    export type Output = Primitive<IIamportResponse<IIamportVBankPayment>>;


    export const METHOD = "PUT";
    export const PATH = "/vbanks";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(): string
    {
        return `/vbanks`;
    }
}



//---------------------------------------------------------
// TO PREVENT THE UNUSED VARIABLE ERROR
//---------------------------------------------------------
AesPkcs5;
Fetcher;
Primitive;
