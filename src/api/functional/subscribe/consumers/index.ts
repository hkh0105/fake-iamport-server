/**
 * @packageDocumentation
 * @module api.functional.subscribe.consumers
 */
//================================================================
import { AesPkcs5 } from "./../../../__internal/AesPkcs5";
import { Fetcher } from "./../../../__internal/Fetcher";
import { Primitive } from "./../../../Primitive";
import type { IConnection } from "./../../../IConnection";

import type { IIamportSubscription } from "./../../../structures/IIamportSubscription";
import type { IIamportResponse } from "./../../../structures/IIamportResponse";


/**
 * 간편 결제 카드 등록하기.
 * 
 * `subscribe.consumers.stoer` 는 고객이 자신의 카드를 서버에 등록해두고, 매번 결제가
 * 필요할 때마다 카드 정보를 반복 입력하는 일 없이, 간편하게 결제를 진행하고자 할 때
 * 사용하는 API 함수이다.
 * 
 * 참고로 `subscribe.consumers.store` 는 클라이언트 어플리케이션이 아임포트가 제공하는 
 * 간편 결제 카드 등록 창을 사용하는 경우, 귀하의 백엔드 서버가 이를 실 서비스에서 호출하는 
 * 일은 없을 것이다. 다만, 고객이 간편 결제 카드를 등록하는 상황을 시뮬레이션하기 위하여, 
 * 테스트 자동화 프로그램 수준에서 사용될 수는 있다.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param customer_uid 고객 (간편 결제 카드) 식별자 키
 * @param input 카드 입력 정보
 * @returns 간편 결제 카드 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportSubscribeConsumersController.store()
 * @path POST /subscribe/consumers/:customer_uid
 */
export function store
    (
        connection: IConnection,
        customer_uid: string,
        input: Primitive<store.Input>
    ): Promise<store.Output>
{
    return Fetcher.fetch
    (
        connection,
        store.CONFIG,
        store.METHOD,
        store.path(customer_uid),
        input
    );
}
export namespace store
{
    export type Input = Primitive<IIamportSubscription.IStore>;
    export type Output = Primitive<IIamportResponse<IIamportSubscription>>;


    export const METHOD = "POST";
    export const PATH = "/subscribe/consumers/:customer_uid";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(customer_uid: string): string
    {
        return `/subscribe/consumers/${customer_uid}`;
    }
}

/**
 * 간편 결제 카드 삭제하기.
 * 
 * 간편 결제를 위하여 등록한 카드를 제거한다.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param customer_uid 고객 (간편 결제 카드) 식별자 키
 * @returns 삭제된 간편 결제 카드 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportSubscribeConsumersController.erase()
 * @path DELETE /subscribe/consumers/:customer_uid
 */
export function erase
    (
        connection: IConnection,
        customer_uid: string
    ): Promise<erase.Output>
{
    return Fetcher.fetch
    (
        connection,
        erase.CONFIG,
        erase.METHOD,
        erase.path(customer_uid)
    );
}
export namespace erase
{
    export type Output = Primitive<IIamportResponse<IIamportSubscription>>;


    export const METHOD = "DELETE";
    export const PATH = "/subscribe/consumers/:customer_uid";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(customer_uid: string): string
    {
        return `/subscribe/consumers/${customer_uid}`;
    }
}



//---------------------------------------------------------
// TO PREVENT THE UNUSED VARIABLE ERROR
//---------------------------------------------------------
AesPkcs5;
Fetcher;
Primitive;
