/**
 * @packageDocumentation
 * @module api.functional.subscribe.payments
 */
//================================================================
import { AesPkcs5 } from "./../../../__internal/AesPkcs5";
import { Fetcher } from "./../../../__internal/Fetcher";
import { Primitive } from "./../../../Primitive";
import type { IConnection } from "./../../../IConnection";

import type { IIamportSubscription } from "./../../../structures/IIamportSubscription";
import type { IIamportResponse } from "./../../../structures/IIamportResponse";
import type { IIamportCardPayment } from "./../../../structures/IIamportCardPayment";


/**
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 카드 결제 신청 정보
 * @returns 카드 결제 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIampotSubscribePaymentsController.onetime()
 * @path POST /subscribe/payments/onetime
 */
export function onetime
    (
        connection: IConnection,
        input: Primitive<onetime.Input>
    ): Promise<onetime.Output>
{
    return Fetcher.fetch
    (
        connection,
        onetime.CONFIG,
        onetime.METHOD,
        onetime.path(),
        input
    );
}
export namespace onetime
{
    export type Input = Primitive<IIamportSubscription.IOnetime>;
    export type Output = Primitive<IIamportResponse<IIamportCardPayment>>;


    export const METHOD = "POST";
    export const PATH = "/subscribe/payments/onetime";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(): string
    {
        return `/subscribe/payments/onetime`;
    }
}

/**
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 미리 등록한 카드를 이용한 결제 신청 정보
 * @returns 카드 결제 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIampotSubscribePaymentsController.again()
 * @path POST /subscribe/payments/again
 */
export function again
    (
        connection: IConnection,
        input: Primitive<again.Input>
    ): Promise<again.Output>
{
    return Fetcher.fetch
    (
        connection,
        again.CONFIG,
        again.METHOD,
        again.path(),
        input
    );
}
export namespace again
{
    export type Input = Primitive<IIamportSubscription.IAgain>;
    export type Output = Primitive<IIamportResponse<IIamportCardPayment>>;


    export const METHOD = "POST";
    export const PATH = "/subscribe/payments/again";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(): string
    {
        return `/subscribe/payments/again`;
    }
}



//---------------------------------------------------------
// TO PREVENT THE UNUSED VARIABLE ERROR
//---------------------------------------------------------
AesPkcs5;
Fetcher;
Primitive;
