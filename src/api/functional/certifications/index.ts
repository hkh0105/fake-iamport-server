/**
 * @packageDocumentation
 * @module api.functional.certifications
 */
//================================================================
import { AesPkcs5 } from "./../../__internal/AesPkcs5";
import { Fetcher } from "./../../__internal/Fetcher";
import { Primitive } from "./../../Primitive";
import type { IConnection } from "./../../IConnection";

import type { IIamportResponse } from "./../../structures/IIamportResponse";
import type { IIamportCertification } from "./../../structures/IIamportCertification";

export * as otp from "./otp";

/**
 * 본인인증 정보 열람하기.
 * 
 * `certiciations.at` 은 본인인증 정보를 열람할 때 사용하는 API 함수이다.
 * 
 * 다만 이 API 함수를 통하여 열람한 본인인증 정보 {@link IIamportCertification} 이
 * 곧 OTP 인증까지 마쳐 본인인증을 모두 마친 레코드라는 보장은 없다. 본인인증의 완결
 * 여부는 오직, {@link IIamportCertification.certified} 값을 직접 검사해봐야만 알
 * 수 있기 때문이다.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param imp_uid 대상 본인인증 정보의 {@link IIamportCertification.imp_uid}
 * @returns 본인인증 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportCertificationsController.at()
 * @path GET /certifications/:imp_uid
 */
export function at
    (
        connection: IConnection,
        imp_uid: string
    ): Promise<at.Output>
{
    return Fetcher.fetch
    (
        connection,
        at.CONFIG,
        at.METHOD,
        at.path(imp_uid)
    );
}
export namespace at
{
    export type Output = Primitive<IIamportResponse<IIamportCertification>>;


    export const METHOD = "GET";
    export const PATH = "/certifications/:imp_uid";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(imp_uid: string): string
    {
        return `/certifications/${imp_uid}`;
    }
}

/**
 * 본인인증 정보 삭제하기.
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param imp_uid 대상 본인인증 정보의 {@link IIamportCertification.imp_uid}
 * @returns 삭제된 본인인증 정보
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller FakeIamportCertificationsController.erase()
 * @path DELETE /certifications/:imp_uid
 */
export function erase
    (
        connection: IConnection,
        imp_uid: string
    ): Promise<erase.Output>
{
    return Fetcher.fetch
    (
        connection,
        erase.CONFIG,
        erase.METHOD,
        erase.path(imp_uid)
    );
}
export namespace erase
{
    export type Output = Primitive<IIamportResponse<IIamportCertification>>;


    export const METHOD = "DELETE";
    export const PATH = "/certifications/:imp_uid";
    export const CONFIG = {
        input_encrypted: false,
        output_encrypted: false,
    };

    export function path(imp_uid: string): string
    {
        return `/certifications/${imp_uid}`;
    }
}



//---------------------------------------------------------
// TO PREVENT THE UNUSED VARIABLE ERROR
//---------------------------------------------------------
AesPkcs5;
Fetcher;
Primitive;
